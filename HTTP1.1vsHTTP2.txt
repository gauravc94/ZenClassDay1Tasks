What is HTTP?
--------------
HTTP is short for Hypertext Transfer Protocol, which defines a set of rules for computers and servers to request and send information.
For example, when someone navigates to guvi.in on their computer or cellphone, their web browser sends an HTTP request to the GUVI servers for the content that appears on the webpage.
Then, GUVI servers send HTTP responses with the text, images, and formatting that the browser displays to the user.
HTTP ensures all this communication happens smoothly and efficiently.


HTTP1.1
--------
Introduced in 1997, HTTP1.1 is still in use on the web.
It operates like a simple request-response system where browsers make one request at a time over a single TCP connection, waiting for each resource to download before requesting the next.
This can cause delays and bottlenecks, especially when loading webpages with many elements.


HTTP2
------
In 2015, a new, much faster and more efficient version of HTTP called HTTP2 was created.
Its key feature is Multiplexing i.e. allowing multiple requests and responses to flow simultaneously over a single TCP connection.
This significantly reduces the page load times as it enables concurrent downloads of images, scripts and other resources.
Additionally, further reduced data transfer is enabled by HPACK, a clever header compression technique.


HTTP1.1 vs HTTP2, the key differences
--------------------------------------
1. Multiplexing. HTTP1.1 loads resources one after the other, so if one resource cannot be loaded, it blocks all the other resources behind it.
HTTP2's Multiplexing eliminates queuing and head-of-line blocking, delivering content faster.

2. Header compression. To speed up web performance, both HTTP1.1 and HTTP2 compress HTTP messages to make them smaller.
However, in HTTP2, HPACK eliminates a few bytes from every HTTP packet which translates to faster page loads, improved responsiveness, and ultimately, a smoother web experience for users.
So, if you're looking for a faster, more efficient way to navigate the web, HTTP2 is the clear winner.

3. Server push. Typically, a server only serves content to a client device if the client asks for it.
However, modern webpages often involve several dozen separate resources that the client must request.
HTTP2 solves this problem by allowing a server to "push" content to a client before the client asks for it and also lets the client know what pushed content to expect.